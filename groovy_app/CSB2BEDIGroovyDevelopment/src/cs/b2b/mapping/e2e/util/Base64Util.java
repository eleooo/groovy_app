package cs.b2b.mapping.e2e.util;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.zip.ZipInputStream;

import sun.misc.BASE64Decoder;

public class Base64Util {

	public static void main(String[] args) {
		try {
			String str = "";
			String outFileName = "";
			
			str = "";
			outFileName = "c:/11/YusenLogistics_VGMXML_to_CS2_Manifest_map_Jason.groovy";
			
			byte[] bs = getBytesFromBASE64(str);
			
			LocalFileUtil.writeBytesToFile(outFileName, bs);
			
			System.out.println("done.");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public static String getBASE64(byte[] bs) {
		if (bs == null)
			return null;
		return (new sun.misc.BASE64Encoder()).encode(bs);
	}
	
	public static String getBASE64(String s) {
		if (s == null)
			return null;
		return (new sun.misc.BASE64Encoder()).encode(s.getBytes());
	}

	public static String getFromBASE64(String s) throws IOException {
		if (s == null)
			return null;
		BASE64Decoder decoder = new BASE64Decoder();
		
		byte[] b = decoder.decodeBuffer(s);
		return new String(b);
	}
	
	public static String getFromBASE64WithEncoding(String s, String encoding) throws IOException {
		if (s == null)
			return null;
		BASE64Decoder decoder = new BASE64Decoder();
		
		byte[] b = decoder.decodeBuffer(s);
		if (encoding!=null && encoding.trim().length()>0)
			return new String(b, encoding);
		else
			return new String(b);
	}
	
	public static InputStream getInputStreamFromBASE64(String s) throws IOException {
		if (s == null)
			return null;
		
		BASE64Decoder decoder = new BASE64Decoder();
		return new ByteArrayInputStream(decoder.decodeBuffer(s));
		
	}
	
	public static byte[] getBytesFromBASE64(String s) throws IOException {
		if (s == null)
			return null;
		BASE64Decoder decoder = new BASE64Decoder();
		
		byte[] b = decoder.decodeBuffer(s);
		return b;
		
	}
	
	public static String getZipBodyFromBase64(String s, String encoding) throws IOException {
		BASE64Decoder decoder = new BASE64Decoder();
		byte[] content = decoder.decodeBuffer(s);
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		ByteArrayInputStream bais = new ByteArrayInputStream(content);
		ZipInputStream zis = new ZipInputStream(bais);
		zis.getNextEntry();
        byte[] b = new byte[1024];
        for (int c = zis.read(b, 0, 1024); c != -1; c = zis.read(b, 0, 1024)) {
        	baos.write(b, 0, c);                    
        }
		String unzippedContent = new String(baos.toByteArray(), encoding);
		return unzippedContent;
	}
	
//	public static String getFromBASE64(String s) throws Exception {
//		if (s == null)
//			return null;
//		BASE64Decoder decoder = new BASE64Decoder();
//		try {
//			byte[] b = decoder.decodeBuffer(s);
//			return new String(b);
//		} catch (Exception e) {
//			throw e;
//		}
//	}
}
